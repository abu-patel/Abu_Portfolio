<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Abuzar Patel</title>
    <link>https://abu-patel.github.io/Abu_Portfolio/post/</link>
    <description>Recent content in Projects on Abuzar Patel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate><atom:link href="https://abu-patel.github.io/Abu_Portfolio/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Project I: Churn Prediction in a real world B2B Setting using Multi Time Slice approach</title>
      <link>https://abu-patel.github.io/Abu_Portfolio/post/project-1/</link>
      <pubDate>Mon, 09 May 2022 10:58:08 -0400</pubDate>
      
      <guid>https://abu-patel.github.io/Abu_Portfolio/post/project-1/</guid>
      <description>What sets this model so apart from tradiional approach ? Customer churn prediction models using machine learning classification have been developed predominantly by training and testing on one time slice of data. I trained models on multiple time slices of data and refer to this approach as multi-slicing. Results show that given the same time frame of data, multi-slicing significantly improves churn prediction performance compared to training on the entire data set as one time slice.</description>
    </item>
    
    <item>
      <title>Project II: Mobile Phone Price Classifier - A Multi Response Classification</title>
      <link>https://abu-patel.github.io/Abu_Portfolio/post/project-2/</link>
      <pubDate>Sun, 09 Jan 2022 10:58:08 -0400</pubDate>
      
      <guid>https://abu-patel.github.io/Abu_Portfolio/post/project-2/</guid>
      <description>Created a tool for my STAT graduate level final project to classify price range of a mobile phone. I Optimized SVM Kernel, Radial, Random Forest, KNN, PCA and MultiNomial Logistic Regression to reach the best model and successfully received an A grade in the course.
I was able to get the model to predict with 95% accuracy after minimal tuning. For most of the cases this would meet the need of an end user of the app.</description>
    </item>
    
  </channel>
</rss>
